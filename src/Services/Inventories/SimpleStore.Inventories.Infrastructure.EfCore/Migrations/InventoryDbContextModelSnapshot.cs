// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleStore.Inventories.Infrastructure.EfCore.Persistence;

namespace SimpleStore.Inventories.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SimpleStore.Inventories.Domain.Models.Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventoryId");

                    b.ToTable("Inventory");

                    b.HasData(
                        new
                        {
                            InventoryId = new Guid("7aa9115d-00d9-4215-98fa-cbd9aceb0744"),
                            Location = "Inventory-1-Location",
                            Name = "Inventory-1"
                        },
                        new
                        {
                            InventoryId = new Guid("db9af98a-2a0e-4888-9cab-2b9d018bdf88"),
                            Location = "Inventory-2-Location",
                            Name = "Inventory-2"
                        },
                        new
                        {
                            InventoryId = new Guid("2bd3355c-e658-4973-9c30-008f85d103bb"),
                            Location = "Inventory-3-Location",
                            Name = "Inventory-3"
                        });
                });

            modelBuilder.Entity("SimpleStore.Inventories.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("15f110f6-38e8-4a21-a344-e5f164f233d6"),
                            Code = "PRD-1"
                        },
                        new
                        {
                            ProductId = new Guid("3d7c9d9b-d889-40f0-963c-643f9ec28d0c"),
                            Code = "PRD-2"
                        },
                        new
                        {
                            ProductId = new Guid("cc04b8ae-01cb-4233-8c82-73e77b21e980"),
                            Code = "PRD-3"
                        });
                });

            modelBuilder.Entity("SimpleStore.Inventories.Domain.Models.ProductInventory", b =>
                {
                    b.Property<Guid>("ProductInventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanPurchase")
                        .HasColumnType("bit");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductInventoryId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventory");

                    b.HasData(
                        new
                        {
                            ProductInventoryId = new Guid("b1abf910-c741-48b1-b04a-70268b4e45cf"),
                            CanPurchase = true,
                            InventoryId = new Guid("7aa9115d-00d9-4215-98fa-cbd9aceb0744"),
                            ProductId = new Guid("15f110f6-38e8-4a21-a344-e5f164f233d6"),
                            Quantity = 10
                        },
                        new
                        {
                            ProductInventoryId = new Guid("b6209206-0c3c-42f0-b3c2-8bf4e4e26478"),
                            CanPurchase = true,
                            InventoryId = new Guid("7aa9115d-00d9-4215-98fa-cbd9aceb0744"),
                            ProductId = new Guid("cc04b8ae-01cb-4233-8c82-73e77b21e980"),
                            Quantity = 5
                        },
                        new
                        {
                            ProductInventoryId = new Guid("bc05daab-f814-4871-9cfa-6e524a75c456"),
                            CanPurchase = true,
                            InventoryId = new Guid("db9af98a-2a0e-4888-9cab-2b9d018bdf88"),
                            ProductId = new Guid("15f110f6-38e8-4a21-a344-e5f164f233d6"),
                            Quantity = 3
                        },
                        new
                        {
                            ProductInventoryId = new Guid("d6f271eb-94fd-4baf-a426-2a0700ddf053"),
                            CanPurchase = true,
                            InventoryId = new Guid("db9af98a-2a0e-4888-9cab-2b9d018bdf88"),
                            ProductId = new Guid("3d7c9d9b-d889-40f0-963c-643f9ec28d0c"),
                            Quantity = 1
                        },
                        new
                        {
                            ProductInventoryId = new Guid("6c7e3fbe-c255-4f8e-884f-077516240d97"),
                            CanPurchase = true,
                            InventoryId = new Guid("2bd3355c-e658-4973-9c30-008f85d103bb"),
                            ProductId = new Guid("3d7c9d9b-d889-40f0-963c-643f9ec28d0c"),
                            Quantity = 9
                        },
                        new
                        {
                            ProductInventoryId = new Guid("48493d82-dd28-4c9e-ac19-53d7b5bba198"),
                            CanPurchase = true,
                            InventoryId = new Guid("2bd3355c-e658-4973-9c30-008f85d103bb"),
                            ProductId = new Guid("cc04b8ae-01cb-4233-8c82-73e77b21e980"),
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("SimpleStore.Inventories.Domain.Models.ProductInventory", b =>
                {
                    b.HasOne("SimpleStore.Inventories.Domain.Models.Inventory", "Inventory")
                        .WithMany("Products")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleStore.Inventories.Domain.Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
