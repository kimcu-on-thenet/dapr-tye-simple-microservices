// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleStore.Inventories.Infrastructure.EfCore.Persistence;

namespace SimpleStore.Inventories.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20200313093614_Init_Database")]
    partial class Init_Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SimpleStore.Inventories.Domain.Models.Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventoryId");

                    b.ToTable("Inventory");

                    b.HasData(
                        new
                        {
                            InventoryId = new Guid("3b709167-9e2f-44cb-961e-9d7bcf77d91b"),
                            Location = "Inventory-1-Location",
                            Name = "Inventory-1"
                        },
                        new
                        {
                            InventoryId = new Guid("8ba6e9b7-950f-47ca-abd2-39bf58f09b1f"),
                            Location = "Inventory-2-Location",
                            Name = "Inventory-2"
                        },
                        new
                        {
                            InventoryId = new Guid("b11291e8-6366-4a50-8ae2-816c80cb11da"),
                            Location = "Inventory-3-Location",
                            Name = "Inventory-3"
                        });
                });

            modelBuilder.Entity("SimpleStore.Inventories.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("b166e6e6-c0fb-45d4-8aa0-b5749800c706"),
                            Code = "PRD-1"
                        },
                        new
                        {
                            ProductId = new Guid("e3766653-91dd-4cac-8a83-c736b2d6b349"),
                            Code = "PRD-2"
                        },
                        new
                        {
                            ProductId = new Guid("cf9dfebe-8cd8-4356-9edd-04e74d4618a3"),
                            Code = "PRD-3"
                        });
                });

            modelBuilder.Entity("SimpleStore.Inventories.Domain.Models.ProductInventory", b =>
                {
                    b.Property<Guid>("ProductInventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanPurchase")
                        .HasColumnType("bit");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductInventoryId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventory");
                });

            modelBuilder.Entity("SimpleStore.Inventories.Domain.Models.ProductInventory", b =>
                {
                    b.HasOne("SimpleStore.Inventories.Domain.Models.Inventory", null)
                        .WithMany("Products")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleStore.Inventories.Domain.Models.Product", null)
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
